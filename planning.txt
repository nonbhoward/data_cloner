A central place to plan project structure

EXECUTION SEQUENCE
run -> src.main.py
    1. config manager initializes, requires nothing
    2. data manager initializes, requires config manager
    3. metadata manager initializes, requires config manager
    4. cloner_manager initializes, requires config & metadata & data manager
    5. cloner_manager runs

METADATA, thoughts on how metadata should be handled
    currently considering options :
        1. continue using json-dict dump/load?
        2. use a local database?

OBJECTS, General descriptions, for specifics look at PLANNED FEATURES
    CACHE_MANAGER, Handles management of previous-run-metadata that affects
      program function on successive runs. At the moment that function is
      not-required.
        Read cache locations.
        Present cache information in a human-readable form.
        Write cache locations.

    CLONER MANAGER, handles import, init, and running of cloners.
        local and dynamically import the cloners
        initialize the cloners
        launch the cloners

    CONFIG MANAGER, object to avoid having to manually modify config dict
        manage reads-to and writes-from the configuration dict

    DATA CLONER, locates, retrieves, and catalogs the fetching of data.
        remote_specific_cloner_a, for example google_drive_cloner
        remote_specific_cloner_b, for example google_drive_cloner
        ..
        remote_specific_cloner_z, for example google_drive_cloner


    FILE MANAGER, object to handle disk read/write activity regarding data,
        noting that metadata is handled by the cache manager


PLANNED FEATURES, aka "specific functions planned elsewhere"
    authenticate with multiple remotes
    cache data between runs in a compressed json
    dispatch cloners asynchronously
    GOOGLEDRIVE
        read metadata, DONE
        download data
        organize cache for :
            remote/local deltas
    REDDIT
      Lessons learned after hacky-weekend to be applied to the reddit cloner
        1. The reddit cloner should possess a generic post-fetching function
             that mixes hot, top, etc.
        2. Write a metadata-parser that can be called against objects like
             a SubmissionListing (which yields Submissions), and other
             objects.
        get top posts
        extract metadata from top posts
        iterate over top posts
        check if metadata in "to delete" collection
            if top post found in "to delete", send remove
        attempt to download each, saving to a guid folder
        write json metadata to same download folder
        confirm data downloaded
        update "to delete" metadata with downloaded file's metadata

        read metadata, IN-PROGRESS
        download data
        confirm downloads
        organize cache for :
            download confirmation
        option to destroy remote data

POTENTIAL CLONER TARGETS
    FACEBOOK, LASTFM, MEGA,

PROJECT STRUCTURE
config
    config, yaml configuration for project
env, the virtual environment created by something like python3 -m venv ./env at root of project
src
    cloners, individual data cloners
        example_cloner.ExampleCloner, an example with only the required cloner properties
        remote_specific_cloner.RemoteSpecificCloner, some misc cloner
    managers,
        cache_manager.CacheManager, manager of all cached data
        cloner_manager.ClonerManager, manager of all data cloners
        config_manager.ConfigManager, manager of configuration data sourced from config.config.yaml
        file_manager.FileManager, manager of file read/writes
    util
        util, module for general utilities
    __init__
    main, entry-point to python
test
    mock, reusable-parts for test modules
    test_cloner_manager
    test_config_manager
    test_A_cloner
    test_B_cloner
    ..
    test_J_cloner
    test_main
    test_util
.gitignore, list of files/folders/patterns to avoid adding to repo
credentials.json, required by googledrive pypi package
planning.txt, this file, lays out a vision for the project
requirements.txt, pip's requirements
