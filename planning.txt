A central place to plan project structure in attempt to head-off misunderstandings

QUICK REDDIT HACK
    get top posts
    extract metadata from top posts
    iterate over top posts
        check if metadata in "to delete" collection
            if top post found in "to delete", send remove
        attempt to download each, saving to a guid folder
        write json metadata to same download folder
        confirm data downloaded
        update "to delete" metadata with downloaded file's metadata

EXECUTION HIERARCHY AND DATA MANAGEMENT PLAN
# TODO think through this
run -> src.main.py
    config manager initializes, reads config
        requires nothing
    metadata manager initializes, reads metadata location from config manager
        requires config manager
    data manager initializes, reads data location from config manager
        requires config manager
    metadata manager reads/loads previous run metadata
    data manager reads file directory tree at data location
    cloner_manager initializes, dynamically imports and loads cloners
        cache_manager
        config_manager
        data_cloner(s)
    config_manager, access config.yaml key values
    file_manager, access locally stored files

OBJECTS
    CACHE_MANAGER, object handling management of metadata that persists
      between runs of the application
        read cache locations
        present cache information in a human-readable form
        write cache locations

    CLONER MANAGER, object handling management of cloners and cloners'
      returned data
        launch the cloners
        pass data to cache manager
        pass data to file manager
        throttle transfers

    CONFIG MANAGER, object to avoid having to manually modify config dict
        manage reads-to and writes-from the configuration dict

    DATA CLONER, object to clone some remote, specific functions planned elsewhere.
      (see "PLANNED FEATURES")
        remote_specific_cloner_a, for example google_drive_cloner
        remote_specific_cloner_b, for example google_drive_cloner
        ..
        remote_specific_cloner_z, for example google_drive_cloner


    FILE MANAGER, object to handle disk read/write activity regarding data,
        noting that metadata is handled by the cache manager


PLANNED FEATURES, aka "specific functions planned elsewhere"
    authenticate with multiple remotes
    cache data between runs in a compressed json
    dispatch cloners asynchronously
    GOOGLEDRIVE
        read metadata, DONE
        download data
        organize cache for :
            remote/local deltas
    REDDIT
        read metadata, IN-PROGRESS
        download data
        confirm downloads
        organize cache for :
            download confirmation
        option to destroy remote data

POTENTIAL CLONER TARGETS
    FACEBOOK, LASTFM, MEGA,

PROJECT STRUCTURE
config
    config, yaml configuration for project
env, the virtual environment created by something like python3 -m venv ./env at root of project
src
    cloners, individual data cloners
        example_cloner.ExampleCloner, an example with only the required cloner properties
        remote_specific_cloner.RemoteSpecificCloner, some misc cloner
    managers,
        cache_manager.CacheManager, manager of all cached data
        cloner_manager.ClonerManager, manager of all data cloners
        config_manager.ConfigManager, manager of configuration data sourced from config.config.yaml
        file_manager.FileManager, manager of file read/writes
    util
        util, module for general utilities
    __init__
    main, entry-point to python
test
    mock, reusable-parts for test modules
    test_cloner_manager
    test_config_manager
    test_A_cloner
    test_B_cloner
    ..
    test_J_cloner
    test_main
    test_util
.gitignore, list of files/folders/patterns to avoid adding to repo
credentials.json, required by googledrive pypi package
planning.txt, this file, lays out a vision for the project
requirements.txt, pip's requirements
