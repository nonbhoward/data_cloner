A central place to plan project structure in attempt to head-off misunderstandings

EXECUTION HIERARCHY
run -> src.main.py
    cache_manager, access locally cached metadata
    cloner_manager, the central object of the program
        cache_manager
        config_manager
        data_cloner(s)
    config_manager, access config.yaml key values
    file_manager, access locally stored files

OBJECTS
    CACHE_MANAGER, object that handle disk read/write
        this object is passed to and managed by the cloner manager
        what should it do?

    CLONER MANAGER, generic container for cloners
        what should it do?
        launch the cloners
        manage the cache
        throttle transfers?
          what else could do this job?

    CONFIG MANAGER, object to avoid having to manually modify config dict
        this object is passed to and managed by the cloner manager

    DATA CLONER
        this object is passed to and managed by the cloner manager
        remote_specific_cloner, for example google_drive_cloner
            attributes
                memory_data_rate, a throttling mechanism in bytes/second
            functions
                download, fetch remote files
                upload, no plans to implement upload as use-case is currently fetching

PLANNED FEATURES
authenticate with multiple remotes
dispatch cloners asynchronously
cache data between runs in a compressed json

PROGRAM FLOW
1. read local configuration & environment variables
    read config works, DONE
    read dotenv works, DONE
2. main module instantiates cloner manager class with config
    cloner manager (cm) locates and dynamically imports cloners, DONE
    cm instantiates cloners that need to run
    cm checks that there are cloners that are ready to run
    cm loads previous run's cache
    cm performs check to see which cloners to instantiate
    cm deploys the cloners asynchronously
    cm manages the returned data
    cm creates a cache of cloner metadata as it runs
    cm waits until all cloners are finished running
    cm records timestamp
    cm writes cache to disk and exits
3. runtime ends

PROJECT STRUCTURE
config
    config, yaml configuration for project
env, the virtual environment created by something like python3 -m venv ./env at root of project
src
    cloners, individual data cloners
        example_cloner.ExampleCloner, an example with only the required cloner properties
        remote_specific_cloner.RemoteSpecificCloner, some misc cloner
    managers,
        cloner_manager.ClonerManager, manager of all data cloners
    util
        util, module for general utilities
    __init__
    main, entry-point to python
test
    mock, reusable-parts for test modules
    test_cloner_manager
    test_config_reader
    test_A_cloner
    test_B_cloner
    ..
    test_J_cloner
    test_main
    test_util
.gitignore, list of files/folders/patterns to avoid adding to repo
credentials.json, required by googledrive pypi package
planning.txt, this file, lays out a vision for the project
requirements.txt, pip's requirements
